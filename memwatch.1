.TH memwatch 1 "16 Oct 2016"
.SH NAME
memwatch \- find and modify variables in other processes
.SH SYNOPSIS
.B memwatch
[-c] [-p] [-P] [-nX] [-iX]
.I pid_or_name
[command [\\; command ...]]
.SH DESCRIPTION
.B memwatch
provides an interactive interface to find and modify variables in the memory of a running process. This is done by repeatedly searching the process\' address space for values that follow the rules given by the user, narrowing down the result set until it includes only the desired variable. After finding this variable, memwatch can monitor it, change its value, "freeze" its value, and more. This functionality is similar to that provided by scanmem(1).

sudo will be required if memwatch is used by a user that is not a member of the procmod group.
.SH OPTIONS
The following command-line options are accepted:
.TP
.B \-c, --no-color
By default, memwatch sometimes uses color escape sequences when printing to the terminal (for example, to highlight differences between data in repeated reads). This option disables that behavior.
.TP
.B \-p, --pause-target
By default, the target process will not be suspended while its memory is being read or written. If this flag is specified, the target will be paused during these operations. This can result in instability or unexpected behavior in the target process, especially if it relies on precise timing (e.g. emulators).
.TP
.B \-P, --allow-parent
By default, memwatch will skip its own pid and the parent's pid when searching processes by name, since this is unlikely to be what the user wants. This option allows memwatch to operate on its direct parent.
.TP
.B \-nX, --max-results=X
By default, memwatch limits the number of results in iterative searches to 1073741824 (that's 2^30). This option overrides this limit. Setting the limit to zero allows an unlimited number of results, but this can be dangerous - for example, when performing a search that yields lots of results, memwatch's memory usage may increase to several times that of the target process.
.TP
.B \-iX, --max-search-iterations=X
By default, memwatch limits the number of historical iterations per search to 5. This option overrides this limit. A higher limit means more memory usage, because each search iteration may contain an entire snapshot of the target process' memory. Setting this limit to zero disables the limit entirely; do this at your own risk.
.TP
.B pid_or_name
The process ID or partial name (case-insensitive) of a process to target. In the case of a partial name, memwatch first searches the list of running processes. If no matching process is found, it then searches the list of processes with arguments. This list is the same as is given by the command \'ps auxwww\'. The value \'KERNEL\' (all caps) specifies that memwatch should operate on the kernel. Operating on the kernel is disabled by default on newer versions of Mac OS X; a kernel patch may be required to re-enable this functionality.
.TP
.B command
A single command (see the following sections) which will be executed instead of entering the interactive interface. Freeze and search commands (except for "find") are not supported in this interface.

.SH "GENERAL COMMANDS"
.BR "" "Most commands can be abbreviated intuitively (e.g. " read ", " rd ", and " r " are all the same command). There are a few unintuitive abbreviations, which are noted below."

memwatch\'s interactive interface implements the following general commands:
.TP
.BI "help"
.RI "Displays this manual page."
.TP
.BI "attach [" pid_or_name "]"
.RI "Attaches to a new process by PID or by name. If no argument is given, attaches to a process with the same name as the currently-attached process."
.TP
.BI "data " data_string
.RI "Parses the data string and displays the raw values returned from the parser. You can use this to test complex data strings before writing them to be sure the correct data will be written."
.TP
.BI "state [" "field_name value" "]"
.RI "With no arguments, displays simple variables from memwatch's internal state. This includes variables from command-line options, like use_color and pause_target. With arguments, sets the internal variable " field_name " to " value "."
.TP
.BI "watch " command " [" args... "]"
.RI "Repeat the given command every second until Ctrl+C is pressed. Not all commands may be repeated; if the command doesn't support watching, it will execute only once."
.TP
.BI "quit"
.RI "Exits memwatch."

.SH "MEMORY ACCESS COMMANDS"
.BR memwatch "\'s interactive interface implements the following commands for reading, writing, and manipulating virtual memory:"
.TP
.BI "access " address " [" mode "]"
.RI "Changes the virtual memory protection mode on the region containing " address ". The access mode is a string consisting of the r, w, or x characters, or some combination thereof. To remove all access to a memory region, use - for the access mode."
.TP
.BI "list"
.RI "Lists memory regions allocated in the target process\'s address space."
.TP
.BI "dump [" filename_prefix "]"
.RI "If " filename_prefix " is given, dumps all readable memory in the target process to files named " filename_prefix ".address1.address2.bin, along with an index file. If " filename_prefix " is not given, only determines which regions are readable."
.TP
.BI "read " "address" " " "size" " [" "filename" "] [" "+format" "]"
.RI "Reads a block of " size " bytes from " address " in the target process\'s memory. " address " and " size " are specified in hexadecimal. If a filename is given, writes the data to the given file instead of printing to the terminal. " format " is a short string specifying which additional interpretations of the data should be printed. It starts with '+' and includes any of the characters 'a' (text), 'f' (float), 'd' (double), and 'r' (reverse-endian); the default is '+a'."
.TP
.BI "write " "address-or-result-id" " " "data"
.RI "Writes " data " to " address " in the target process\'s memory. " address " may be preceded by " s " to read the address from the current search result set, or by " t " to read the address from the results of the previous invocation of the " find " command. For example, specifying " s0 " refers to the first result address in the current search; " s1 " refers to the second result, etc. Results from other searches may also be used by specifying the search name explicitly, as in " s1@search-name ".  See the DATA FORMAT section for information on how to specify the data string."

.SH "MEMORY SEARCH COMMANDS"
.BR memwatch "\'s interactive interface implements the following commands for searching a process\'s memory for variables:"
.TP
.BI "find " data
.RI "Finds all occurrences of " data " in readable regions of the target\'s memory. See the DATA FORMAT section for more information on how to specify the search string. Searches done with this command do not affect the current search results."
.TP
.BI "open " type " [" name " [" predicate " [" value "]]]"
.RI "Opens a search for a variable of the given type in writable memory regions. " type " may be suffixed with a ! to search all readable memory instead of only writable memory. See the SEARCH TYPES section for valid search types. If " name " is not given, the search will be unnamed and cannot be resumed after another search is opened. If " predicate " is given, perform the initial search immediately."
.TP
.BI "open [" name "]"
.RI "If " name " is given, reopens a previous search. If " name " is not given, lists all open searches."
.TP
.BI "close [" name "]"
.RI "If " name " is given, closes the specified search. If " name " is not given, closes the current search."
.TP
.BI "fork " name " [" name2 "]"
.RI "If " name2 " is given, makes a copy of the search named " name " as " name2 ". Otherwise, makes a copy of the current search as " name .
.TP
.BI "search [" "search_name" "] " operator " [" value "]"
.RI "Reads the values of variables in the current list of results (or the named search's results, if a name is given), and filters out the results for which (new value " "operator prev value" ") is false. If " value " is not given, uses the value of the variable during the previous search. Valid operators are < (less than), > (greater than), <= (less-or-equal), >= (greater-or-equal), = (equal), != (not equal), and $ (flag search - true if the two arguments differ in only one bit). The $ operator cannot be used in a search for a floating-point variable."
.TP
.BI "search [" "search_name" "] ."
.RI "Begins a search for a variable with an unknown initial value. Once this is done, future searches can be done using the above operators."
.TP
.BI "results [" search_name "]"
.RI "Displays the current list of results. If search_name is given, displays the results for that search."
.TP
.BI "delete " spec " [" "spec ..." "]"
.RI "Deletes specific search results. " spec " may be the address of a specific result to delete, or a range of addresses to delete, which is inclusive on both ends. Ranges are specified as a pair of addresses separated by a dash with no spaces. Result references like " s1 " are acceptable for this command as well."
.TP
.BI "iterations [" "search_name" "]"
.RI "Displays the list of stored iterations for the current search, or the named search if a name is given."
.TP
.BI "truncate [" "search_name" "] " count
.RI "Deletes all iterations except the " count " most recent from the current search, or the named search if a name is given."
.TP
.BI "undo [" "search_name" "]"
.RI "Undoes the latest iteration of the current search, or the named search if a name is given."
.TP
.BI "set " value
.RI "Writes " value " to all addresses in the current result set."
.TP
.BI "set " result-id " " value
.RI "Writes " value " to one address in the current result set. " result-id " is of the form s## (like for the " write " command)."

.SH "MEMORY FREEZE COMMANDS"
.BR memwatch " implements a memory freezer, which repeatedly writes values to the target\'s memory at a very short interval, effectively fixing the variable's value in the target process. The following commands allow manipulation of frozen variables:"
.TP
.BI "freeze [+n" "name" "] " address-or-result-id " " data " " "[+d]"
.RI "Sets a freeze on " address " with the given data. " address " may refer to a search or find result, using the same syntax as for the " write " command. The given data is written in the background approximately every 10 milliseconds. Sets the freeze name to " name " if given; otherwise, sets the freeze name to the current search name (if any). If " +d " is given, the freeze is initially disabled and won't take effect until enabled with the " enable " command."
.TP
.BI "freeze [+n" "name" "] " address-or-result-id " +s" size " " "[+d]"
.RI "Identical to the above command, but uses the data already present in the process's memory. Size is specified in hexadecimal."
.TP
.BI "freeze [+n" "name" "] " address-or-result-id " +m" max-entries " " data " [+N" null-data "] " "[+d]"
.RI "Sets a freeze on an array of " max-entries " items starting at " address " with the given data. If " data " is not present in the array, the first null entry in the array is overwritten with " data ". Null entries are those whose contents are entirely zeroes, or whose contents match " null-data " if " null-data " is given. The size of each array element is assumed to be the size of " data ". " data " and " null-data " must have equal sizes."
.TP
.BI "unfreeze [" "id" "]"
.RI "If " id " is not given, displays the list of currently-frozen regions. Otherwise, " id " may be the index, address, or name of the region to unfreeze. If a name is given and multiple regions have the same name, unfreezes all of them. If * is given, unfreezes all regions."
.TP
.BI "enable " id
.RI "Enables the given frozen regions, so their values will be written. Values for " id " are specified in the same way as for the " unfreeze " command."
.TP
.BI "disable " id
.RI "Disables the given frozen regions, so their values will not be written. Values for " id " are specified in the same way as for the " unfreeze " command."
.TP
.BI "frozen [data | commands]"
.RI "Displays the list of currently-frozen regions. If run as " "frozen data" ", displays the data associated with each region as well. If run as " "frozen commands" ", displays for each frozen region a command to freeze that region (this is generally a more concise way to view frozen regions with their data)."

.SH "EXECUTION STATE MANAGEMENT COMMANDS"
.BR memwatch " implements experimental support for viewing and modifying execution state in the target process, implemented by the following commands:"
.TP
.BR "pause" " (or " - )
.RI "Pauses the target process."
.TP
.BR "resume" " (or " + )
.RI "Unpauses the target process."
.TP
.BI "signal " signum
.RI "Sends the Unix signal " signum " to the target process. See " "signal(3)" " for a list of signals."
.TP
.BI "regs"
.RI "Reads the register state for all threads in the target process. If the process is not paused, thread registers might not represent an actual overall state of the process at any point in time."
.TP
.BI "wregs " "thread_id value reg"
.RI "Writes " value " to " reg " in one thread of the target process. " thread_id " should match one of the thread IDs shown by the regs command."
.TP
.BI "stacks [" size "]"
.RI "Reads " size " bytes from the stack of each thread. If not given, " size " defaults to 0x100 (256 bytes). This won't provide a consistent snapshot of the process' state unless it's paused."
.TP
.BI "run " filename " [+l" start_label_name "] [+s" stack_size "] [+w] [+r] [+n]"
.RI "Assembles the given assembly code (from the file) and runs it in a new thread in the target process. The file must be written in Intel syntax, and only common opcodes are supported. If +l is given, execution will start at the given label; otherwise it will start at the label " start ". If +s is given, the value will be rounded up to a page boundary, and that much memory will be allocated for the thread's stack; if +s is not given, the default stack size is 4KB. If +w is given, the memory used for the executable code will also be writable. If +r is given, memwatch will print the thread's register values when it terminates. If +n is given, memwatch will not wait for the thread to terminate, and will not deallocate its code and stack space. Without this option, memwatch will wait until the thread terminates or until memwatch receives a SIGINT (Ctrl+C), in which case it will terminate the thread and free its memory."

.SH "SEARCH TYPES"
.BR memwatch " supports searching for the following types of variables. Any type except 'str' may be prefixed by the letter 'r' to perform reverse-endian searches (that is, to search for big-endian values on a little-endian architecture, or vice versa)."
.TP
.B s, str, string
Search for any string. Values are specified in immediate data format (see the DATA FORMAT section for more information).
.TP
.B f, flt, float
Search for a 32-bit floating-point value.
.TP
.B d, dbl, double
Search for a 64-bit floating-point value.
.TP
.B u8, u16, u32, u64
Search for an unsigned 8-bit, 16-bit, 32-bit, or 64-bit value.
.TP
.B s8, s16, s32, s64
Search for a signed 8-bit, 16-bit, 32-bit, or 64-bit value.

.SH "DATA FORMAT"
.RI "Input data for raw data searches and the " find ", " write ", and " freeze " commands is specified in a custom format, described here. You can try using this format with the " data " command (see above). Every pair of hexadecimal digits represents one byte, with special control sequences as follows:"
.TP
.B Decimal integers
A decimal integer may be specified by preceding it with # signs (# for a single byte, ## for a 16-bit int, ### for a 32-bit int, or #### for a 64-bit int).
.TP
.B Floating-point numbers
A floating-point number may be specified by preceding it with % signs (% for single-precision, %% for double-precision).
.TP
.B String literals
ASCII strings must be enclosed in double quotes, and unicode strings in single quotes. Within a string, the escape sequences \\n, \\r, \\t, and \\\\ will be replaced with a newline, a carriage return, a tab character, and a single backslash respectively.
.TP
.B File contents
A string enclosed in < > will be treated as a filename, and will be replaced with the contents of the file in the output data.
.TP
.B Change of endianness
A dollar sign ($) inverts the endianness of the data following it. This applies to unicode string literals, integers specified with # signs, and floating-point numbers.
.TP
.B Wildcard
.RI "Any data between question marks (?) will match any byte when searching with the " find " command or freezing array entries with the " "freeze array" " command. This is not yet implemented for the " search " command."
.TP
.B Comments
Comments are formatted in C-style blocks; anything between /* and */ will be omitted from the output string, as well as anything between // and a newline (though this format is rarely used since commands are delimited by newlines). Comments cannot be nested.

.RS n
Any non-recognized characters are ignored. The initial endian-ness of the output depends on the endian-ness of the host machine: on an Intel machine, the resulting data would be little-endian.

Example data string: /* omit 01 02 */ 03 ?04? $ ##30 $ ##127 ?"dark"? ###-1 'cold'

Resulting data (Intel): 03 04 00 1E 7F 00 64 61 72 6B FF FF FF FF 63 00 6F 00 6C 00 64 00

Resulting mask: FF 00 FF FF FF FF 00 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF

.SH "EXAMPLES"
See README.md (included with memwatch) for usage examples.

.SH "AUTHOR"
Martin Michelsen <mjem@wildblue.net> is the original author and current maintainer of memwatch.

.SH "SEE ALSO"
ps(1), top(1), signal(3), scanmem(1), gdb(1)
