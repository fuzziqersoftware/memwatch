.TH memwatch 1 "17 Nov 2013"
.SH NAME
memwatch \- find and modify variables in other processes
.SH SYNOPSIS
.B memwatch
[ -c ] [ -f ] [ -nX ]
.I pid_or_name
.SH DESCRIPTION
.B memwatch
provides an interactive interface to find and modify variables in the memory of a running process. This is done by repeatedly searching the process\' address space for values that follow the rules given by the user, narrowing down the result set until it includes only the desired variable. After finding this variable, memwatch can monitor it, change its value, "freeze" its value, and more. This functionality is similar to that provided by scanmem(1).

sudo will be required if memwatch is used by a user that is not a member of the procmod group.
.SH OPTIONS
The following command-line options are accepted:
.TP
.B \-c, --no-color
By default, memwatch sometimes uses color escape sequences when printing to the terminal (for example, to highlight differences between data in repeated reads). This option disables that behavior.
.TP
.B \-f, --no-freeze
By default, the target process will be suspended while its memory is being read or written. If this flag is specified, the target will not be paused during these operations. This can result in instability or unexpected behavior in the target process.
.TP
.B \-nX, --max-results=X
By default, memwatch limits the number of results in iterative searches to 1073741824 (that's 2^30). This option overrides this limit. Setting the limit to zero allows an unlimited number of results, but this can be dangerous - for example, when performing a search that yields lots of results, memwatch's memory usage may increase to several times that of the target process.
.TP
.B pid_or_name
The process ID or partial name (case-insensitive) of a process to target. In the case of a partial name, memwatch first searches the list of running processes. If no matching process is found, it then searches the list of processes with arguments. This list is the same as is given by the command \'ps auxwww\'. The value \"KERNEL\" (all caps) specifies that memwatch should operate on the kernel. Operating on the kernel is disabled by default on newer versions of Mac OS X; a kernel patch may be required to re-enable it.

.SH "GENERAL COMMANDS"
.BR memwatch "\'s interactive interface implements the following general commands:"
.TP
.BR "attach [pid_or_name]"
.RI "Attaches to a new process by PID or by name. If no argument is given, attaches to a process with the same name as the currently-attached process."
.TP
.BR "help"
.RI "Displays a help message detailing usage of the commands."
.TP
.BR "quit"
.RI "Exits memwatch."

.SH "MEMORY ACCESS COMMANDS"
.BR memwatch "\'s interactive interface implements the following commands for reading, writing, and manipulating virtual memory:"
.TP
.BI "access " "mode address"
.RI "Changes the virtual memory protection mode on the region containing " address .
.TP
.BI "list"
.RI "Lists memory regions allocated in the target process\'s address space."
.TP
.BI "dump " "filename"
.RI "If " filename " is given, dumps all readable memory in the target process to files named " filename "_address. If " filename " is not given, only determines which regions are readable."
.TP
.BI "read " "address" " " "size" " " "[filename]"
.RI "Reads a block of " size " bytes from " address " in the target process\'s memory. " address " is specified in hexadecimal, and " size " is specified in decimal. To specify " size " in hexadecimal, use the syntax " "address:size" " instead of " "address size" ". If a filename is given, writes the data to the given file instead of printing to the console. The " read " command may be prepended with " watch " to repeat the read every second until Ctrl+C is pressed."
.TP
.BI "write " "address data"
.RI "Writes " data " to " address " in the target process\'s memory. See the DATA FORMAT section for information on how to specify the data string."

.SH "MEMORY SEARCH COMMANDS"
.BR memwatch "\'s interactive interface implements the following commands for searching a process\'s memory for variables:"
.TP
.BI "find " data
.RI "Finds all occurrences of " data " in readable regions of the target\'s memory. See the DATA FORMAT section for more information on how to specify the search string. Searches done with this command do not affect the current search results."
.TP
.BI "open " "type name"
.RI "Opens a search for a variable of the given type in writable memory regions. " type " may be prepended with a ! to search all readable memory instead of only writable memory. See the SEARCH TYPES section for valid search types. If " name " is not given, the search will be unnamed and cannot be resumed after another search is opened."
.TP
.BI "open " name
.RI "If " name " is given, reopens a previous search. If " name " is not given, lists all open searches."
.TP
.BI "close " name
.RI "If " name " is given, closes the specified search. If " name " is not given, closes the current search."
.TP
.BI "fork " name " " [name2]
.RI "If " name2 " is given, makes a copy of the search named " name " as " name2 ". Otherwise, makes a copy of the current search as " name " and switches to it."
.TP
.BI "search " "[search_name] operator value"
.RI "Reads the values of variables in the current list of results (or the named search's results, if a name is given), and filters out the results for which (new value " "operator prev value" ") is false. If " value " is not given, uses the value of the variable during the previous search. Valid operators are < (less than), > (greater than), <= (less-or-equal), >= (greater-or-equal), = (equal), != (not equal), $ (flag search - true if the two arguments differ in only one bit). The $ operator cannot be used in a search for a floating-point variable."
.TP
.BI "results " "[search_name]"
.RI "Displays the current list of results. If search_name is given, displays the results for that search. The command may be prepended with " watch " to read new values every second."
.TP
.BI "delete " "addr1 [addr2]"
.RI "If " addr2 " is given, deletes all results between " addr1 " and " addr2 ". If " addr2 " is not given, deletes the search result at " addr1 .
.TP
.BI "set " value
.RI "Writes " value " to all addresses in the current result set."

.SH "MEMORY FREEZE COMMANDS"
.BR memwatch " implements a memory freezer, which repeatedly writes values to the target\'s memory at a very short interval, effectively fixing the variable's value in the target process. The following commands allow manipulation of frozen variables:"
.TP
.BI "freeze " "[\'name\'] address data"
.RI "Sets a freeze on " address " with the given data. The given data is written in the background approximately every 10 milliseconds. Sets the freeze name to " name " if given; otherwise, sets the freeze name to the current search name (if any). If a previous frozen region has the same address as the new region, the previous region is unfrozen."
.TP
.BI "freeze " "[\'name\'] address:size"
.RI "Identical to the above command, but uses the data already present in the process's memory. Size must be specified in hexadecimal."
.TP
.BI "unfreeze " "id"
.RI "If " id " is not given, displays the list of currently-frozen regions. Otherwise, " id " may be the index, address, or name of the region to unfreeze. If a name is given and multiple regions have the same name, unfreezes all of them."

.SH "EXECUTION STATE MANAGEMENT COMMANDS"
.BR memwatch " implements experimental support for viewing and modifying execution state in the target process, implemented by the following commands:"
.TP
.BR "pause" " (or " - )
.RI "Pauses the target process."
.TP
.BR "resume" " (or " + )
.RI "Unpauses the target process."
.TP
.BR "kill"
.RI "Kills the target process and exits memwatch."
.TP
.BI "signal " signum
.RI "Sends the Unix signal " signum " to the target process. See " "signal(3)" " for a list of signals."
.TP
.BI "regs"
.RI "Reads the register state for all threads in the target process. If the process is not paused, thread registers might not represent an actual overall state of the process at any point in time."
.TP
.BI "wregs" " value reg [thread_id]"
.RI "Writes " value " to " reg " in all threads of the target process. If " thread_id " is given, writes the register\'s value only in that thread. " thread_id " should match one of the thread indices printed by the regs command."
.TP
.BI "break" " type address"
.RI "Sets a " type " breakpoint on " address ". " type " may contain the characters x (break on execute), r (break on read), w (break on read/write), or i (break on I/O), as well as 1, 2, 4, or 8 (specifying the size of the region to watch)."

.SH "SEARCH TYPES"
.BR memwatch " supports searching for the following types of variables. Any type except 'a' may be prefixed by the letter 'l' to perform reverse-endian searches (that is, to search for big-endian values on a little-endian architecture, or vice versa)."
.TP
.BR a
Search for any string. Values are specified in immediate data format (see the DATA FORMAT section for more information).
.TP
.BR f
Search for a 32-bit floating-point value.
.TP
.BR d
Search for a 64-bit floating-point value.
.TP
.B u8, u16, u32, u64
Search for an unsigned 8-bit, 16-bit, 32-bit, or 64-bit value.
.TP
.B s8, s16, s32, s64
Search for a signed 8-bit, 16-bit, 32-bit, or 64-bit value.

.SH "DATA FORMAT"
Input data for raw data searches and the find, write, and freeze commands is specified in "immediate" format. Every pair of hexadecimal digits represents one byte, with special control sequences as follows:
.TP
.B Decimal integers
A decimal integer may be specified by preceding it with # signs (# for a single byte, ## for a 16-bit int, ### for a 32-bit int, or #### for a 64-bit int).
.TP
.B Floating-point numbers
A floating-point number may be specified by preceding it with % signs (% for single-precision, %% for double-precision).
.TP
.B String literals
ASCII strings must be enclosed in double quotes, and unicode strings in single quotes. Within a string, the escape sequences \\n, \\r, \\t, and \\\\ will be replaced with a newline, a carriage return, a tab character, and a single backslash respectively.
.TP
.B File contents
A string enclosed in < > will be treated as a filename, and will be replaced with the contents of the file in the output data.
.TP
.B Change of endianness
A dollar sign ($) inverts the endianness of the data following it.
.TP
.B Wildcard
.RB "A question mark (?) will match any byte when searching with the " find " command. This is not yet implemented for the " search " command."

.RS n
Any non-recognized characters are ignored. The initial endian-ness of the output depends on the endian-ness of the host machine: on an Intel machine, the resulting data would be little-endian.

Example data string: 03 04 $ ##30 $ ##127 "dark" ###-1 'cold'

Resulting data (Intel): 03 04 00 1E 7F 00 64 61 72 6B FF FF FF FF 63 00 6F 00 6C 00 64 00

.SH "AUTHOR"
Martin Michelsen <mjem@wildblue.net> is the original author and current maintainer of memwatch.

.SH "SEE ALSO"
ps(1), top(1), signal(3), scanmem(1), gdb(1)
